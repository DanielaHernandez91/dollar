var a=1
&${a} <=> 1
&a <=> 1
a <=> ${a}
a= a + 2
a <=> 3


//Parameters ignored of course
a(5) <=> 3

def b {$1 + 1}
b(5) <=> 6
b(5) <=> 6

var c= b(5)

for i in [1..3] {
    @@ i
}


//Okay so we add one to a and get "b" we then look for the variable by that name, it's paramterized so we supply the parameter value of 3 - the function adds one and we get 4 !
@@ "----------"
b(3) <=> 4
@@ "----------"
(($("a"++))(3)) <=> 4
@@ "----------"
///print out the variables and values from a..c
for v in ["a".."c"] {
    @@ ("" + v + "=" + $(v)(2))(1);
}

@@ "----------"

//Variable constraints
def string (it is String)
var (string) d="test"

var <String> f="testing"


var (previous != it || previous is Void) e = 1
@@e
e=2
e=3

var errorOccured= false

&{
    error { @@ "Caught "+type ; errorOccured= true}
    @@ "*******"
    e=3
}


.: &errorOccured

//Dynamically named variable
var $("a"+"b")=2
ab <=> 2

//Using the _ prefix to avoid clashing with keywords
var _map= {
    "in": 1,
}

var _in= map._in
_in <=> 1




