
// = (assignment) normally forces immediate evaluation of the RHS
// however := is the lambda assignment and does not, thus creating a
// lambda style expression
@@ "*****"

lamval causes { @@ "->"+lamval; }

lamval=1
lambda2 := lamval


lambda := ( ( lamval )  + lamval )
notlambda = ( ( lamval )  + lamval )

lamval= 7

lamval2= 23

//The simplest possible lambda (serves no purpose!)
.: 1 == 1

.: 1 == fix 1

.: & 1 == 1

@@ "*****"
//Since the lambda shares the scope of when it was declared this should be 14 not 2
.: &lambda == 14
.: &notlambda == 2

//And this is the single lamval syntax from earlier
&lambda2 <=> 7



//Now we test levels of indirection
delayName := ("lamval" + lamval)
@@ "*****"
lamval=5
lamval5=13

//Did you follow that crazyness :-) Don't do this at home!

@@ "*****"
@@ "lamval"

@@ "lamval" + 1

@@ lamval + 1

@@ lamval

@@ $("lamval" + lamval)

@@ $('lamval' + lamval)


//Lambda variable resolution @@! - notice the two levels of indirection here - yeah edge case :-)
&$(${delayName}) <=> 13


// & forces immediate evaluation, the value lock symbol
// otherwise values are assumed to be lambdas and are lazily evaluated

function := [
    @@ "Function start",  //This is displayed during evaluation, return is void
    & lamval,  //locked into the current value at definition (i.e. 5)
       lamval,  //lazy evaluated, will take the value when the whole block is evaluated
       $1      //A value to be passed in via a pipe 1 is a special variable
]


lamval = "fred"

@@ ([1,2,3] -> function)
([1,2,3] -> function) <=>  [ 5, "fred", [1, 2, 3] ]

removeWorld := ($1 - "World")

@@ ["Hello", "World"] -> removeWorld

(["Hello", "World"] -> removeWorld) <=> ["Hello"]
(["Goodbye", "World"] -> removeWorld) <=> ["Goodbye"]


($2 + " " + $1)("Hello", "World") <=> "World Hello"

testParams := ($2 + " " + $1)
(testParams) ("Hello", "World") <=> "World Hello"

//short-form of parameterized variable (function call style)
testParams("Hello", "World") <=> "World Hello"

///////////////////////////////////////////////////////////////////////////////
a=1
b=1
a causes (print a)
a causes (b= a)

//Note the use of the fix operator otherwise we are saying a is always equal to 1

&a <=> 1
&b <=> 1

a=2

&a <=> 2
&b <=> 2

///////////////////////////////////////////////////////////////////////////////


c=1
d=1
c > 3 ? (d= c)
&c <=> 1
&d <=> 1
c=2
&c <=> 2
&d <=> 1
c=5
&c <=> 5
&d <=> 5

///////////////////////////////////////////////////////////////////////////////

e=void

//Length is greater than or equal to 4 unless void
(#it >= 4 || it is VOID) collectedValues=void

//count starts at 0 so this means five to collect
collect e until count == 4 unless it == 10{
    print count
    print collected
    collectedValues= collected
}

e=1
e=2
e=3
e=4
e=5
e=6
&collectedValues <=> [1,2,3,4,5]
e=7
e=8
e=9
e=10
&collectedValues <=> [6,7,8,9]
e=11
e=12
e=13
e=14
e=15
e=16
&collectedValues <=> [11,12,13,14,15]

///////////////////////////////////////////////////////////////////////////////


//Test against reactivity for if()

f=0
g=0
f=1
f=2
f=3
if(~f) {
    g=g+1
}
f=4
f=5

g <=> 1


///////////////////////////////////////////////////////////////////////////////
//Tests for incorrect executions in an if statement, based on the else operator.

crimes= [{"location_subtype":"","outcome_status":null,"persistent_id":"138345d85e0e564defe7756f90cf1d127ff655649412b7a41579e6764e51b828","month":"2014-08","context":"","location":{"street":{"name":"On or near Sports/recreation Area","id":1172196},"latitude":"50.856123","longitude":"-0.115792"},"id":35196312,"category":"anti-social-behaviour","location_type":"Force"},{"location_subtype":"","outcome_status":null,"persistent_id":"54cc87fc116bd787dfa41988409e0ad481cc7b2348bffd8fa14451cab82caf63","month":"2014-08","context":"","location":{"street":{"name":"On or near Sports/recreation Area","id":1172196},"latitude":"50.856123","longitude":"-0.115792"},"id":35196311,"category":"anti-social-behaviour","location_type":"Force"},{"location_subtype":"","outcome_status":{"date":"2014-08","category":"Investigation complete; no suspect identified"},"persistent_id":"99d894734b2b1bd9356e42899bbe7a2af62b1e905e248544ee39a57bb9fb8a5f","month":"2014-08","context":"","location":{"street":{"name":"On or near Sports/recreation Area","id":1172196},"latitude":"50.856123","longitude":"-0.115792"},"id":35186173,"category":"criminal-damage-arson","location_type":"Force"}]

categories= crimes each { $1.category; }
crimeCount=0

//~ is the truthy operator void is false, 0 is false, "" is false, empty list is false, empty map is false.
if (~ categories["anti-social-behaviour"]) {
   crimeCount=crimeCount+1
} else {
    @@ "No anti-social behaviour in your area!"
}

crimeCount <=> 1

///////////////////////////////////////////////////////////////////////////////

// Listen assignment


h=1
i ?= h + 2
h=4
i <=> 6

///////////////////////////////////////////////////////////////////////////////

// Subscription assignment


sub := j *= random:dummy
colors= ["red","green","blue"]
k := colors[j * #colors]
@@k
volatile updatedK=false
k ?-> {updatedK=true}
SLEEP(5 Sec)
&updatedK <=> true
sub.unsub();





