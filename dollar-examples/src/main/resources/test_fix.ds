
//This function returns a lambda
def lamdaReturn1 {
        var a= 10;
        a= a + 5;
        { @@ $1; @@ a; $1 + 2 * a }
}
(5 -> lamdaReturn1()) <=> 35

def lamdaReturn2 {
        var a= 10;
        a= a + 5;
        { @@ $1; @@ a; $1 + a }
}

//Execute function and pipe 5 to the returned lambda
(5 -> lamdaReturn2()) <=> 20
//Pipe 5 to the function then execute the lambda with 10 as a parameter
(5 -> lamdaReturn2)(10) <=> 25


//If and lambdas, note := does not fix

const b := (if (1 == 1) {
    {$1 * 3}
})

b(5) <=> 15

// Blocks and fix

var c=0
{
  c=c+1;
}
&c <=> 0

& {
 c=c+1;
}

&c <=> 1

serial {
    c= c+1;
}

&c <=> 2

parallel {
    c= c+1;
}

&c <=> 3

{
    "test": { c= c+1 }
}

&c <=> 3

&{
    "test": { c= c+1 }
}

&c <=> 4

// Assignment, the '=' fixes to depth 1

var d= {c= c+1}
&c <=> 4
&d
&c <=> 5

var e= {{c=c+1}}
&c <=> 5
e()
&c <=> 5
e()()
&c <=> 6




